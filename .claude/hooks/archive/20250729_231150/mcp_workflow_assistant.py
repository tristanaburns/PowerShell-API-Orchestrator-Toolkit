#!/usr/bin/env python3
"""
MCP WORKFLOW ASSISTANT HOOK
Provides real-time MCP tool suggestions and workflow patterns
Helps Claude Code choose the optimal MCP tools for any task

Hook Type: PrePrompt / UserPromptSubmit
"""

import json
import logging
import sys
from datetime import datetime
from pathlib import Path

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(".claude/hooks/logs/mcp_workflow.log", mode="a"),
        logging.StreamHandler(),
    ],
)
logger = logging.getLogger("MCPWorkflowAssistant")


def get_mcp_workflow_instructions():
    """Generate MCP workflow instructions based on available servers"""

    return f"""
# üéØ MCP WORKFLOW ASSISTANT - ACTIVE AT {datetime.now().strftime('%H:%M:%S')}

## üöÄ IMMEDIATE MCP TOOL SELECTION GUIDE

### **When user mentions ANY of these keywords, USE these MCP tools:**

**üìÅ FILE OPERATIONS** ‚Üí `filesystem MCP`
Keywords: file, read, write, directory, folder, path, save, load
- Use filesystem MCP for ALL file operations
- Store file context in memory MCP
- Chain with Context7 for file format documentation

**üåê WEB/SEARCH OPERATIONS** ‚Üí `brave-search MCP` + `browserbase MCP`
Keywords: search, web, internet, lookup, browse, website, scrape
- Use brave-search MCP for web searches
- Use browserbase MCP for web automation
- Use Context7 MCP for web technology documentation

**üìö DOCUMENTATION/LEARNING** ‚Üí `Context7 MCP` + `sequential-thinking MCP`
Keywords: documentation, docs, how to, tutorial, guide, reference, API
- ALWAYS use Context7 MCP for current documentation
- Use sequential-thinking MCP for complex learning
- Store insights in memory MCP

**üèóÔ∏è CODE OPERATIONS** ‚Üí `E2B MCP` + `Context7 MCP`
Keywords: code, execute, run, test, debug, compile, build
- ALWAYS use E2B MCP for code execution (never run_in_terminal)
- Use Context7 MCP for language/framework docs
- Store code patterns in memory MCP

**üéØ COMPLEX TASKS** ‚Üí `task-orchestrator MCP` + Multiple tools
Keywords: complex, project, workflow, multi-step, planning, organize
- START with task-orchestrator MCP to break down tasks
- Use sequential-thinking MCP for planning
- Use memory MCP to track progress
- Chain with appropriate execution tools

**üß† THINKING/ANALYSIS** ‚Üí `sequential-thinking MCP` + `memory MCP`
Keywords: think, analyze, reason, plan, consider, evaluate, assess
- Use sequential-thinking MCP for deep reasoning
- Store thought processes in memory MCP
- Use Context7 MCP for research support

**üìä DATA OPERATIONS** ‚Üí `chroma MCP` + `motherduck MCP`
Keywords: data, analytics, search, vector, database, query, analysis
- Use chroma MCP for vector operations
- Use motherduck MCP for data analytics
- Use memory MCP for data insights

**üåç BROWSER/WEB APPS** ‚Üí `browserbase MCP` + `playwright MCP`
Keywords: browser, web app, automation, testing, UI, interaction
- Use browserbase MCP for cloud browser automation
- Use playwright MCP for professional browser testing
- Store test patterns in memory MCP

**üìù PROJECT MANAGEMENT** ‚Üí `notion MCP` + `linear MCP`
Keywords: project, task management, documentation, notes, organize
- Use notion MCP for documentation
- Use linear MCP for issue tracking
- Use memory MCP for project context

**‚ö° AUTOMATION/INTEGRATION** ‚Üí `make MCP` + `zapier MCP`
Keywords: automate, integrate, connect, workflow, process, trigger
- Use make MCP for workflow automation
- Use zapier MCP for app integrations
- Use task-orchestrator MCP for complex automation

## üîó STANDARD MCP WORKFLOW PATTERNS

### **RESEARCH & DOCUMENTATION PATTERN:**
```
1. Context7 MCP ‚Üí Get current documentation
2. Sequential-thinking MCP ‚Üí Analyze and plan
3. Memory MCP ‚Üí Store insights
4. Notion MCP ‚Üí Document findings
```

### **DEVELOPMENT TASK PATTERN:**
```
1. Task-orchestrator MCP ‚Üí Break down development task
2. Context7 MCP ‚Üí Get framework/library docs
3. Sequential-thinking MCP ‚Üí Plan implementation
4. E2B MCP ‚Üí Execute and test code
5. Memory MCP ‚Üí Store patterns and solutions
6. Linear MCP ‚Üí Track progress
```

### **DATA ANALYSIS PATTERN:**
```
1. Task-orchestrator MCP ‚Üí Plan analysis approach
2. Filesystem MCP ‚Üí Access data files
3. Motherduck MCP ‚Üí Process and analyze data
4. Chroma MCP ‚Üí Vector search for insights
5. Memory MCP ‚Üí Store findings
6. Notion MCP ‚Üí Document results
```

### **WEB AUTOMATION PATTERN:**
```
1. Task-orchestrator MCP ‚Üí Plan automation workflow
2. Context7 MCP ‚Üí Get web technology docs
3. Browserbase MCP ‚Üí Execute browser automation
4. Memory MCP ‚Üí Store automation patterns
5. Make/Zapier MCP ‚Üí Create automated workflows
```

### **COMPLEX PROJECT PATTERN:**
```
1. Task-orchestrator MCP ‚Üí Project breakdown
2. Sequential-thinking MCP ‚Üí Strategic planning
3. Memory MCP ‚Üí Project context management
4. Multiple execution MCPs ‚Üí Implementation
5. Linear MCP ‚Üí Progress tracking
6. Notion MCP ‚Üí Documentation
7. Make/Zapier MCP ‚Üí Process automation
```

## ‚ö° INSTANT MCP TOOL MAPPING TABLE

| User Intent | Primary MCP | Secondary MCP | Support MCP |
|-------------|-------------|---------------|-------------|
| File tasks | filesystem | memory | context7 |
| Web search | brave-search | browserbase | memory |
| Code work | e2b | context7 | memory |
| Documentation | context7 | sequential-thinking | memory |
| Complex tasks | task-orchestrator | sequential-thinking | memory |
| Data analysis | chroma/motherduck | sequential-thinking | memory |
| Browser work | browserbase | playwright | memory |
| Project mgmt | notion/linear | task-orchestrator | memory |
| Automation | make/zapier | task-orchestrator | memory |
| Deep thinking | sequential-thinking | context7 | memory |

## üéØ MCP ENFORCEMENT CHECKLIST

Before responding to ANY user request:

‚òê **Identify operation type** (file, web, code, docs, task, data, etc.)
‚òê **Select primary MCP tool** from the mapping above
‚òê **Plan MCP tool chain** for complex operations
‚òê **Include memory MCP** for context retention
‚òê **AVOID basic operations** (run_in_terminal, basic file ops, etc.)
‚òê **Use Context7 MCP** for any documentation needs
‚òê **Consider task-orchestrator MCP** for multi-step tasks

## üî• CRITICAL REMINDERS

- **NEVER** use run_in_terminal for code execution ‚Üí Use E2B MCP
- **NEVER** use basic file operations ‚Üí Use filesystem MCP  
- **NEVER** rely on training data for docs ‚Üí Use Context7 MCP
- **ALWAYS** use memory MCP to retain important context
- **ALWAYS** consider task-orchestrator MCP for complex workflows
- **ALWAYS** use sequential-thinking MCP for deep reasoning

## üèÜ MCP MASTERY GOALS

- Use **3+ MCP tools** for complex tasks
- **Chain MCP tools** logically for better results
- **Store context** in memory MCP consistently
- **Document workflows** in notion MCP
- **Automate repetitive tasks** with make/zapier MCP

**REMEMBER: You have 11+ powerful MCP servers - USE THEM STRATEGICALLY!**

---
*MCP Workflow Assistant Active - {datetime.now().isoformat()}*
"""


def main():
    """Main hook execution"""
    try:
        # Generate and output MCP workflow instructions
        workflow_instructions = get_mcp_workflow_instructions()
        print(workflow_instructions)

        logger.info("MCP workflow instructions provided")
        sys.exit(0)

    except Exception as e:
        logger.error("Error in MCP workflow assistant: %s", str(e))
        sys.exit(0)


if __name__ == "__main__":
    main()
